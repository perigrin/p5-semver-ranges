#!/usr/bin/env perl
use strict;
use Test::More;
use Test::Fatal;

use SemVer::Ranges qw(
  gt lt eq neq cmp lte gte
  satisfies parse_version
);

{
    # comparison tests
    # [version1, version2]
    # version1 should be greater than version2
    my @versions = (
        [ '0.0.0',  '0.0.0-foo' ],
        [ '0.0.1',  '0.0.0' ],
        [ '1.0.0',  '0.9.9' ],
        [ '0.10.0', '0.9.0' ],
        [ '0.99.0', '0.10.0', {} ],
        [ '2.0.0',   '1.2.3',      { loose => 0 } ],
        [ 'v0.0.0',  '0.0.0-foo',  1 ],
        [ 'v0.0.1',  '0.0.0',      { loose => 1 } ],
        [ 'v1.0.0',  '0.9.9',      1 ],
        [ 'v0.10.0', '0.9.0',      1 ],
        [ 'v0.99.0', '0.10.0',     1 ],
        [ 'v2.0.0',  '1.2.3',      1 ],
        [ '0.0.0',   'v0.0.0-foo', 1 ],
        [ '0.0.1',   'v0.0.0',     1 ],
        [ '1.0.0',   'v0.9.9',     1 ],
        [ '0.10.0',  'v0.9.0',     1 ],
        [ '0.99.0',  'v0.10.0',    1 ],
        [ '2.0.0',   'v1.2.3',     1 ],
        [ '1.2.3',   '1.2.3-asdf' ],
        [ '1.2.3',   '1.2.3-4' ],
        [ '1.2.3',   '1.2.3-4-foo' ],

        [ '1.2.3-5-foo',        '1.2.3-5' ],
        [ '1.2.3-5',            '1.2.3-4' ],
        [ '1.2.3-5-foo',        '1.2.3-5-Foo' ],
        [ '3.0.0',              '2.7.2+asdf' ],
        [ '1.2.3-a.10',         '1.2.3-a.5' ],
        [ '1.2.3-a.b',          '1.2.3-a.5' ],
        [ '1.2.3-a.b',          '1.2.3-a' ],
        [ '1.2.3-a.b.c.10.d.5', '1.2.3-a.b.c.5.d.100' ],
        [ '1.2.3-r2',           '1.2.3-r100' ],
        [ '1.2.3-r100',         '1.2.3-R2' ],
        # a test from further down below that we're trying to figure out
        ['1.2.3-pre.2', '1.2.3-pre+asdf'],
        ['2.4.3-pre+asdf', '1.2.3-pre.2'],
        ['2.0.0', '1.0.0'],
    );

    for my $pair (@versions) {
        ok gt( @$pair[ 0, 1 ] ), "gt @$pair[0,1]";
        ok lt( @$pair[ 1, 0 ] ), "lt @$pair[1,0]";
        ok !gt( @$pair[ 1, 0 ] ), "!gt @$pair[1,0]";
        ok !lt( @$pair[ 0, 1 ] ), "!lt @$pair[0,1]";
        ok eq ( @$pair[ 0, 0 ] ), "eq @$pair[0,0]";
        ok lte ( @$pair[ 0, 0 ] ), "lte @$pair[0,0]";
        ok gte ( @$pair[ 0, 0 ] ), "gte @$pair[0,0]";
        ok eq ( @$pair[ 1, 1 ] ), "eq @$pair[1,1]";
        ok lte ( @$pair[ 1, 1 ] ), "lte @$pair[0,0]";
        ok gte ( @$pair[ 1, 1 ] ), "gte @$pair[0,0]";
        ok neq( @$pair[ 0, 1 ] ), "neq @$pair[0,1]";
        ok cmp( $pair->[1], '==', $pair->[1] ),
          "cmp $pair->[1], '==', $pair->[1]";
        ok cmp( $pair->[0], '>=', $pair->[1] ),
          "cmp $pair->[0], '>=', $pair->[1]";
        ok cmp( $pair->[1], '<=', $pair->[0] ),
          "cmp $pair->[1], '<=', $pair->[0]";
        ok cmp( $pair->[0], '!=', $pair->[1] ),
          "cmp $pair->[0], '!=', $pair->[1]";
    }
}

{
    # equality tests
    # [version1, version2]
    # version1 should be equivalent to version2
    my @versions = (
        [ '1.2.3',            'v1.2.3',                   0 ],
        [ '1.2.3+build',      '1.2.3+otherbuild' ],
        [ 'v1.2.3+build',     '1.2.3+otherbuild' ],
        [ '1.2.3-beta+build', '1.2.3-beta+otherbuild' ],
    );

=for later
        [ '1.2.3',            '=1.2.3',                   1 ],
        [ '1.2.3',            'v 1.2.3',                  1 ],
        [ '1.2.3',            '= 1.2.3',                  1 ],
        [ '1.2.3',            ' v1.2.3',                  1 ],
        [ '1.2.3',            ' =1.2.3',                  1 ],
        [ '1.2.3',            ' v 1.2.3',                 1 ],
        [ '1.2.3',            ' = 1.2.3',                 1 ],
        [ '1.2.3-0',          'v1.2.3-0',                 1 ],
        [ '1.2.3-0',          '=1.2.3-0',                 1 ],
        [ '1.2.3-0',          'v 1.2.3-0',                1 ],
        [ '1.2.3-0',          '= 1.2.3-0',                1 ],
        [ '1.2.3-0',          ' v1.2.3-0',                1 ],
        [ '1.2.3-0',          ' =1.2.3-0',                1 ],
        [ '1.2.3-0',          ' v 1.2.3-0',               1 ],
        [ '1.2.3-0',          ' = 1.2.3-0',               1 ],
        [ '1.2.3-1',          'v1.2.3-1',                 1 ],
        [ '1.2.3-1',          '=1.2.3-1',                 1 ],
        [ '1.2.3-1',          'v 1.2.3-1',                1 ],
        [ '1.2.3-1',          '= 1.2.3-1',                1 ],
        [ '1.2.3-1',          ' v1.2.3-1',                1 ],
        [ '1.2.3-1',          ' =1.2.3-1',                1 ],
        [ '1.2.3-1',          ' v 1.2.3-1',               1 ],
        [ '1.2.3-1',          ' = 1.2.3-1',               1 ],
        [ '1.2.3-beta',       'v1.2.3-beta',              1 ],
        [ '1.2.3-beta',       '=1.2.3-beta',              1 ],
        [ '1.2.3-beta',       'v 1.2.3-beta',             1 ],
        [ '1.2.3-beta',       '= 1.2.3-beta',             1 ],
        [ '1.2.3-beta',       ' v1.2.3-beta',             1 ],
        [ '1.2.3-beta',       ' =1.2.3-beta',             1 ],
        [ '1.2.3-beta',       ' v 1.2.3-beta',            1 ],
        [ '1.2.3-beta',       ' = 1.2.3-beta',            1 ],
        [ '1.2.3-beta+build', ' = 1.2.3-beta+otherbuild', 1 ],
        [ '1.2.3+build',      ' = 1.2.3+otherbuild',      1 ],
=cut

    for my $pair (@versions) {
        ok eq (@$pair), "eq @$pair";
        ok !neq(@$pair), "!neq @$pair";
        ok cmp( $pair->[0], '==', $pair->[1] ),
          "cmp($pair->[0], '==', $pair->[1])";
         ok !cmp( $pair->[0], '!=', $pair->[1] ),
          "cmp($pair->[0], '!=', $pair->[1])";
        # skipped === and !==
        ok !gt(@$pair[0,1]), "!gt(@$pair[0,1])";
        ok gte(@$pair[0,1]), "gte(@$pair[0,1])";
        ok !lt(@$pair[0,1]), "!lt(@$pair[0,1])";
        ok lte(@$pair[0,1]), "lte(@$pair[0,1])";
    }
}

{
    # Range tests
    # [range, version]
    # version should be included by range
    my @versions = (
        [ '1.0.0 - 2.0.0',                   '1.2.3' ],
        [ '^1.2.3+build',                    '1.2.3' ],
        [ '^1.2.3+build',                    '1.3.0' ],
        [ '1.2.3-pre+asdf - 2.4.3-pre+asdf', '1.2.3' ],

        #    [ '1.2.3pre+asdf - 2.4.3-pre+asdf',  '1.2.3', 1 ],
        #    [ '1.2.3-pre+asdf - 2.4.3pre+asdf',  '1.2.3', 1 ],
        #    [ '1.2.3pre+asdf - 2.4.3pre+asdf',   '1.2.3', 1 ],
        [ '1.2.3-pre+asdf - 2.4.3-pre+asdf', '1.2.3-pre.2' ],
        [ '1.2.3-pre+asdf - 2.4.3-pre+asdf', '2.4.3-alpha' ],
        [ '1.2.3+asdf - 2.4.3+asdf',         '1.2.3' ],

        [ '1.0.0', '1.0.0' ],
        [ '>=*',   '0.2.4' ],
        [ '',      '1.0.0' ],
        [ '*', '1.2.3', {} ],

        #[ '*',          'v1.2.3', { loose => 123 } ],
        #[ '>=1.0.0',    '1.0.0',  /asdf/ ],
        #[ '>=1.0.0',    '1.0.1',  { loose => undef } ],
        #[ '>=1.0.0',    '1.1.0',  { loose => 0 } ],
        #[ '>1.0.0',     '1.0.1',  { loose => undef } ],
        [ '>1.0.0',     '1.1.0' ],
        [ '<=2.0.0',    '2.0.0' ],
        [ '<=2.0.0',    '1.9999.9999' ],
        [ '<=2.0.0',    '0.2.9' ],
        [ '<2.0.0',     '1.9999.9999' ],
        [ '<2.0.0',     '0.2.9' ],
        [ '>= 1.0.0',   '1.0.0' ],
        [ '>=  1.0.0',  '1.0.1' ],
        [ '>=   1.0.0', '1.1.0' ],
        [ '> 1.0.0',    '1.0.1' ],
        [ '>  1.0.0',   '1.1.0' ],
        [ '<=   2.0.0', '2.0.0' ],
        [ '<= 2.0.0',   '1.9999.9999' ],
        [ '<=  2.0.0',  '0.2.9' ],
        [ '<    2.0.0', '1.9999.9999' ],
        [ "<\t2.0.0",   '0.2.9' ],

        #[ '>=0.1.97',          'v0.1.97', 1 ],
        [ '>=0.1.97',          '0.1.97' ],
        [ '0.1.20 || 1.2.4',   '1.2.4' ],
        [ '>=0.2.3 || <0.0.1', '0.0.0' ],
        [ '>=0.2.3 || <0.0.1', '0.2.3' ],
        [ '>=0.2.3 || <0.0.1', '0.2.4' ],
        [ '||',                '1.3.4' ],
        [ '2.x.x',             '2.1.3' ],
        [ '1.2.x',             '1.2.3' ],
        [ '1.2.x || 2.x',      '2.1.3' ],
        [ '1.2.x || 2.x',      '1.2.3' ],
        [ 'x',                 '1.2.3' ],
        [ '2.*.*',             '2.1.3' ],
        [ '1.2.*',             '1.2.3' ],
        [ '1.2.* || 2.*',      '2.1.3' ],
        [ '1.2.* || 2.*',      '1.2.3' ],
        [ '*',                 '1.2.3' ],
        [ '2',                 '2.1.2' ],
        [ '2.3',               '2.3.1' ],
        [ '~x',                '0.0.9' ],    # >= 2.4.0 < 2.5.0
        [ '~2',                '2.0.9' ],    # >= 2.4.0 < 2.5.0
        [ '~2.4',              '2.4.0' ],    # >= 2.4.0 < 2.5.0
        [ '~2.4',              '2.4.5' ],
        [ '~>3.2.1',           '3.2.2' ],    # >= 3.2.1 < 3.3.0,
        [ '~1', '1.2.3' ],      # >= 1.0.0 < 2.0.0
        [ '~>1', '1.2.3' ],
        [ '~> 1', '1.2.3' ],
        [ '~1.0', '1.0.2' ], # >= 1.0.0 < 1.1.0,
        [ '~ 1.0',                '1.0.2' ],
        [ '~ 1.0.3',              '1.0.12' ],
        [ '>=1',                  '1.0.0' ],
        [ '>= 1',                 '1.0.0' ],
        [ '<1.2',                 '1.1.1' ],
        [ '< 1.2',                '1.1.1' ],
        [ '~v0.5.4-pre',          '0.5.5' ],
        [ '~v0.5.4-pre',          '0.5.4' ],
        [ '=0.7.x',               '0.7.2' ],
        [ '<=0.7.x',              '0.7.2' ],
        [ '>=0.7.x',              '0.7.2' ],
        [ '<=0.7.x',              '0.6.2' ],
        [ '~1.2.1 >=1.2.3',       '1.2.3' ],
        [ '~1.2.1 =1.2.3',        '1.2.3' ],
        [ '~1.2.1 1.2.3',         '1.2.3' ],
        [ '~1.2.1 >=1.2.3 1.2.3', '1.2.3' ],
        [ '~1.2.1 1.2.3 >=1.2.3', '1.2.3' ],
        [ '~1.2.1 1.2.3',         '1.2.3' ],
        [ '>=1.2.1 1.2.3',        '1.2.3' ],
        [ '1.2.3 >=1.2.1',        '1.2.3' ],
        [ '>=1.2.3 >=1.2.1',      '1.2.3' ],
        [ '>=1.2.1 >=1.2.3',      '1.2.3' ],
        [ '>=1.2',                '1.2.8' ],
        [ '^1.2.3',               '1.8.1' ],
        [ '^0.1.2',               '0.1.2' ],
        [ '^0.1',                 '0.1.2' ],
        [ '^0.0.1',               '0.0.1' ],
        [ '^1.2',                 '1.4.2' ],
        [ '^1.2 ^1',              '1.4.2' ],
        [ '^1.2.3-alpha',         '1.2.3-pre' ],
        [ '^1.2.0-alpha',         '1.2.0-pre' ],
        [ '^0.0.1-alpha',         '0.0.1-beta' ],
        [ '^0.1.1-alpha',         '0.1.1-beta' ],
        [ '^x',                   '1.2.3' ],
        [ 'x - 1.0.0',            '0.9.7' ],
        [ 'x - 1.x',              '0.9.7' ],
        [ '1.0.0 - x',            '1.9.7' ],
        [ '1.x - x',              '1.9.7' ],
        [ '<=7.x',                '7.9.9' ]
    );

    for my $pair (@versions) {
        ok satisfies(@$pair), "$pair->[0] satsifed by $pair->[1]";
    }
}
TODO: {
	our $TODO = "negative range tests not working yet";
    # Negative Range tests
    # [range, version]
    # version should not be included by range
    my @versions = (
        [ '1.0.0 - 2.0.0',           '2.2.3' ],
        [ '1.2.3+asdf - 2.4.3+asdf', '1.2.3-pre.2' ],
        [ '1.2.3+asdf - 2.4.3+asdf', '2.4.3-alpha' ],
        [ '^1.2.3+build',            '2.0.0' ],
        [ '^1.2.3+build',            '1.2.0' ],
        [ '^1.2.3',                  '1.2.3-pre' ],
        [ '^1.2',                    '1.2.0-pre' ],
        [ '>1.2',                    '1.3.0-beta' ],
        [ '<=1.2.3',                 '1.2.3-beta' ],
        [ '^1.2.3',                  '1.2.3-beta' ],
        [ '=0.7.x',                  '0.7.0-asdf' ],
        [ '>=0.7.x',                 '0.7.0-asdf' ],

        #['1', '1.0.0beta', { loose: 420 }],
        #['<1', '1.0.0beta', true],
        #['< 1', '1.0.0beta', true],
        [ '1.0.0',   '1.0.1' ],
        [ '>=1.0.0', '0.0.0' ],
        [ '>=1.0.0', '0.0.1' ],
        [ '>=1.0.0', '0.1.0' ],
        [ '>1.0.0',  '0.0.1' ],
        [ '>1.0.0',  '0.1.0' ],
        [ '<=2.0.0', '3.0.0' ],
        [ '<=2.0.0', '2.9999.9999' ],
        [ '<=2.0.0', '2.2.9' ],
        [ '<2.0.0',  '2.9999.9999' ],
        [ '<2.0.0',  '2.2.9' ],

        #['>=0.1.97', 'v0.1.93', true],
        [ '>=0.1.97',          '0.1.93' ],
        [ '0.1.20 || 1.2.4',   '1.2.3' ],
        [ '>=0.2.3 || <0.0.1', '0.0.3' ],
        [ '>=0.2.3 || <0.0.1', '0.2.2' ],
        [ '2.x.x',        '1.1.3', { loose => 'NaN' } ],
        [ '2.x.x',        '3.1.3' ],
        [ '1.2.x',        '1.3.3' ],
        [ '1.2.x || 2.x', '3.1.3' ],
        [ '1.2.x || 2.x', '1.1.3' ],
        [ '2.*.*',        '1.1.3' ],
        [ '2.*.*',        '3.1.3' ],
        [ '1.2.*',        '1.3.3' ],
        [ '1.2.* || 2.*', '3.1.3' ],
        [ '1.2.* || 2.*', '1.1.3' ],
        [ '2',            '1.1.2' ],
        [ '2.3',          '2.4.1' ],
        [ '~2.4',    '2.5.0' ],    # >=2.4.0 <2.5.0
        [ '~2.4',    '2.3.9' ],
        [ '~>3.2.1', '3.3.2' ],    # >=3.2.1 <3.3.0
        [ '~>3.2.1', '3.2.0' ],    # >=3.2.1 <3.3.0
        [ '~1',      '0.2.3' ],    # >=1.0.0 <2.0.0
        [ '~>1',     '2.2.3' ],
        [ '~1.0',    '1.1.0' ],    # >=1.0.0 <1.1.0
        [ '<1',      '1.0.0' ],
        [ '>=1.2',   '1.1.1' ],

        #['1', '2.0.0beta', true],
        [ '~v0.5.4-beta', '0.5.4-alpha' ],
        [ '=0.7.x',       '0.8.2' ],
        [ '>=0.7.x',      '0.6.2' ],
        [ '<0.7.x',       '0.7.2' ],
        [ '<1.2.3',       '1.2.3-beta' ],
        [ '=1.2.3',       '1.2.3-beta' ],
        [ '>1.2',         '1.2.8' ],
        [ '^0.0.1',       '0.0.2' ],
        [ '^1.2.3',       '2.0.0-alpha' ],
        [ '^1.2.3',       '1.2.2' ],
        [ '^1.2',         '1.1.9' ],

        #['*', 'v1.2.3-foo', true],
        # invalid ranges never satisfied ![ 'blerg', '1.2.3' ],

        #['git+https://user:password0123@github.com/foo', '123.0.0', true],
        [ '^1.2.3', '2.0.0-pre' ],
        [ '^1.2.3', !!0 ]
    );

    for my $pair (@versions) {
        ok !satisfies(@$pair), "$pair->[0] not satsifed by $pair->[1]";
    }
}

TODO: {
	our $TODO = "unlocked prerelease range tests aren't implemented yet";
    # unlocked prerelease range tests
    # [range, version]
    # version should be included by range
    my @versions = (
        [ '*',          '1.0.0-rc1' ],
        [ '^1.0.0',     '2.0.0-rc1' ],
        [ '^1.0.0-0',   '1.0.1-rc1' ],
        [ '^1.0.0-rc2', '1.0.1-rc1' ],
        [ '^1.0.0',     '1.0.1-rc1' ],
        [ '^1.0.0',     '1.1.0-rc1' ]
    );

    for my $pair (@versions) {
        ok satisfies(@$pair), "$pair->[0] satsifed by $pair->[1]";
    }
}

{
    # negative unlocked prerelease range tests
    # [range, version]
    # version should not be included by range
    my @versions = (
		['^1.0.0', '1.0.0-rc1'],
		['^1.2.3-rc2', '2.0.0']
    );

    for my $pair (@versions) {
        ok !satisfies(@$pair), "$pair->[0] not satsifed by $pair->[1]";
    }
}

{
    # invalid version numbers
    my @versions = (
		'1.2.3.4',
		'NOT VALID',
		#1.2, # TODO I'm not sure this is invalid in Perl because scalars.
		undef,
		'Infinity.NaN.Infinity'
    );

    for my $v (@versions) {
        like exception { parse_version($v) }, qr/Invalid Version/,
          "$v got Invalid Version";
    }
}

{
    # invalid cmp usage
    like exception { cmp( '1.2.3', 'a frog', '4.5.6' ) },
      qr/Invalid operator: a frog/, "Invalid operator: a frog";
}

done_testing();
__END__
{
	# increment versions test
	#  [version, inc, result, identifier]
	#  inc(version, inc) -> result
    my @versions = (
        [ '1.2.3', 'major', '2.0.0' ],
        [ '1.2.3', 'minor', '1.3.0' ],
        [ '1.2.3', 'patch', '1.2.4' ],
        [ '1.2.3tag',           'major',      '2.0.0', true ],
        [ '1.2.3-tag',          'major',      '2.0.0' ],
        [ '1.2.3',              'fake',       null ],
        [ '1.2.0-0',            'patch',      '1.2.0' ],
        [ 'fake',               'major',      null ],
        [ '1.2.3-4',            'major',      '2.0.0' ],
        [ '1.2.3-4',            'minor',      '1.3.0' ],
        [ '1.2.3-4',            'patch',      '1.2.3' ],
        [ '1.2.3-alpha.0.beta', 'major',      '2.0.0' ],
        [ '1.2.3-alpha.0.beta', 'minor',      '1.3.0' ],
        [ '1.2.3-alpha.0.beta', 'patch',      '1.2.3' ],
        [ '1.2.4',              'prerelease', '1.2.5-0' ],
        [ '1.2.3-0',            'prerelease', '1.2.3-1' ],
        [ '1.2.3-alpha.0',      'prerelease', '1.2.3-alpha.1' ],
        [ '1.2.3-alpha.1',      'prerelease', '1.2.3-alpha.2' ],
        [ '1.2.3-alpha.2',      'prerelease', '1.2.3-alpha.3' ],
        [ '1.2.3-alpha.0.beta', 'prerelease', '1.2.3-alpha.1.beta' ],
        [ '1.2.3-alpha.1.beta', 'prerelease', '1.2.3-alpha.2.beta' ],
        [ '1.2.3-alpha.2.beta', 'prerelease', '1.2.3-alpha.3.beta' ],
        [ '1.2.3-alpha.10.0.beta', 'prerelease', '1.2.3-alpha.10.1.beta' ],
        [ '1.2.3-alpha.10.1.beta', 'prerelease', '1.2.3-alpha.10.2.beta' ],
        [ '1.2.3-alpha.10.2.beta', 'prerelease', '1.2.3-alpha.10.3.beta' ],
        [ '1.2.3-alpha.10.beta.0', 'prerelease', '1.2.3-alpha.10.beta.1' ],
        [ '1.2.3-alpha.10.beta.1', 'prerelease', '1.2.3-alpha.10.beta.2' ],
        [ '1.2.3-alpha.10.beta.2', 'prerelease', '1.2.3-alpha.10.beta.3' ],
        [ '1.2.3-alpha.9.beta',    'prerelease', '1.2.3-alpha.10.beta' ],
        [ '1.2.3-alpha.10.beta',   'prerelease', '1.2.3-alpha.11.beta' ],
        [ '1.2.3-alpha.11.beta',   'prerelease', '1.2.3-alpha.12.beta' ],
        [ '1.2.0',                 'prepatch',   '1.2.1-0' ],
        [ '1.2.0-1',               'prepatch',   '1.2.1-0' ],
        [ '1.2.0',                 'preminor',   '1.3.0-0' ],
        [ '1.2.3-1',               'preminor',   '1.3.0-0' ],
        [ '1.2.0',                 'premajor',   '2.0.0-0' ],
        [ '1.2.3-1',               'premajor',   '2.0.0-0' ],
        [ '1.2.0-1',               'minor',      '1.2.0' ],
        [ '1.0.0-1',               'major',      '1.0.0' ],

        [ '1.2.3',              'major',      '2.0.0',         false, 'dev' ],
        [ '1.2.3',              'minor',      '1.3.0',         false, 'dev' ],
        [ '1.2.3',              'patch',      '1.2.4',         false, 'dev' ],
        [ '1.2.3tag',           'major',      '2.0.0',         true,  'dev' ],
        [ '1.2.3-tag',          'major',      '2.0.0',         false, 'dev' ],
        [ '1.2.3',              'fake',       null,            false, 'dev' ],
        [ '1.2.0-0',            'patch',      '1.2.0',         false, 'dev' ],
        [ 'fake',               'major',      null,            false, 'dev' ],
        [ '1.2.3-4',            'major',      '2.0.0',         false, 'dev' ],
        [ '1.2.3-4',            'minor',      '1.3.0',         false, 'dev' ],
        [ '1.2.3-4',            'patch',      '1.2.3',         false, 'dev' ],
        [ '1.2.3-alpha.0.beta', 'major',      '2.0.0',         false, 'dev' ],
        [ '1.2.3-alpha.0.beta', 'minor',      '1.3.0',         false, 'dev' ],
        [ '1.2.3-alpha.0.beta', 'patch',      '1.2.3',         false, 'dev' ],
        [ '1.2.4',              'prerelease', '1.2.5-dev.0',   false, 'dev' ],
        [ '1.2.3-0',            'prerelease', '1.2.3-dev.0',   false, 'dev' ],
        [ '1.2.3-alpha.0',      'prerelease', '1.2.3-dev.0',   false, 'dev' ],
        [ '1.2.3-alpha.0',      'prerelease', '1.2.3-alpha.1', false, 'alpha' ],
        [ '1.2.3-alpha.0.beta', 'prerelease', '1.2.3-dev.0',   false, 'dev' ],
        [
            '1.2.3-alpha.0.beta', 'prerelease',
            '1.2.3-alpha.1.beta', false,
            'alpha'
        ],
        [ '1.2.3-alpha.10.0.beta', 'prerelease', '1.2.3-dev.0', false, 'dev' ],
        [
            '1.2.3-alpha.10.0.beta', 'prerelease',
            '1.2.3-alpha.10.1.beta', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.10.1.beta', 'prerelease',
            '1.2.3-alpha.10.2.beta', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.10.2.beta', 'prerelease',
            '1.2.3-alpha.10.3.beta', false,
            'alpha'
        ],
        [ '1.2.3-alpha.10.beta.0', 'prerelease', '1.2.3-dev.0', false, 'dev' ],
        [
            '1.2.3-alpha.10.beta.0', 'prerelease',
            '1.2.3-alpha.10.beta.1', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.10.beta.1', 'prerelease',
            '1.2.3-alpha.10.beta.2', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.10.beta.2', 'prerelease',
            '1.2.3-alpha.10.beta.3', false,
            'alpha'
        ],
        [ '1.2.3-alpha.9.beta', 'prerelease', '1.2.3-dev.0', false, 'dev' ],
        [
            '1.2.3-alpha.9.beta',  'prerelease',
            '1.2.3-alpha.10.beta', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.10.beta', 'prerelease',
            '1.2.3-alpha.11.beta', false,
            'alpha'
        ],
        [
            '1.2.3-alpha.11.beta', 'prerelease',
            '1.2.3-alpha.12.beta', false,
            'alpha'
        ],
        [ '1.2.0',         'prepatch',   '1.2.1-dev.0', false, 'dev' ],
        [ '1.2.0-1',       'prepatch',   '1.2.1-dev.0', false, 'dev' ],
        [ '1.2.0',         'preminor',   '1.3.0-dev.0', false, 'dev' ],
        [ '1.2.3-1',       'preminor',   '1.3.0-dev.0', false, 'dev' ],
        [ '1.2.0',         'premajor',   '2.0.0-dev.0', false, 'dev' ],
        [ '1.2.3-1',       'premajor',   '2.0.0-dev.0', false, 'dev' ],
        [ '1.2.0-1',       'minor',      '1.2.0',       false, 'dev' ],
        [ '1.0.0-1',       'major',      '1.0.0',       false, 'dev' ],
        [ '1.2.3-dev.bar', 'prerelease', '1.2.3-dev.0', false, 'dev' ]
    );

    for my $tuple (@versions) {
      my ($pre, $what, $wanted, $loose, $id) = @$tuple;
	  is inc($pre, $what, $loose, $id), $wanted;
    }
}

{
    # diff versions test
	# [version1, version2, result]
	# diff(version1, version2) -> result
    my @versions = (
		[ '1.2.3',         '0.2.3',       'major' ],
		[ '1.4.5',       '0.2.3',       'major' ],
		[ '1.2.3',       '2.0.0-pre',   'premajor' ],
		[ '1.2.3',       '1.3.3',       'minor' ],
		[ '1.0.1',       '1.1.0-pre',   'preminor' ],
		[ '1.2.3',       '1.2.4',       'patch' ],
		[ '1.2.3',       '1.2.4-pre',   'prepatch' ],
		[ '0.0.1',       '0.0.1-pre',   'prerelease' ],
		[ '0.0.1',       '0.0.1-pre-2', 'prerelease' ],
		[ '1.1.0',       '1.1.0-pre',   'prerelease' ],
		[ '1.1.0-pre-1', '1.1.0-pre-2', 'prerelease' ],
		[ '1.0.0',       '1.0.0',       null ]
    );

    for my $tuple (@versions) {
		my ($v1, $v2, $wanted) = @$tuple;
		is diff($v1, $v2), $wanted;
    }
}

{
    # valid range tests
    # validRange(range) -> result
    # translate ranges into their canonical form
    my @versions = (
        [ '1.0.0 - 2.0.0',     '>=1.0.0 <=2.0.0' ],
        [ '1.0.0',             '1.0.0' ],
        [ '>=*',               '*' ],
        [ '',                  '*' ],
        [ '*',                 '*' ],
        [ '*',                 '*' ],
        [ '>=1.0.0',           '>=1.0.0' ],
        [ '>1.0.0',            '>1.0.0' ],
        [ '<=2.0.0',           '<=2.0.0' ],
        [ '1',                 '>=1.0.0 <2.0.0' ],
        [ '<=2.0.0',           '<=2.0.0' ],
        [ '<=2.0.0',           '<=2.0.0' ],
        [ '<2.0.0',            '<2.0.0' ],
        [ '<2.0.0',            '<2.0.0' ],
        [ '>= 1.0.0',          '>=1.0.0' ],
        [ '>=  1.0.0',         '>=1.0.0' ],
        [ '>=   1.0.0',        '>=1.0.0' ],
        [ '> 1.0.0',           '>1.0.0' ],
        [ '>  1.0.0',          '>1.0.0' ],
        [ '<=   2.0.0',        '<=2.0.0' ],
        [ '<= 2.0.0',          '<=2.0.0' ],
        [ '<=  2.0.0',         '<=2.0.0' ],
        [ '<    2.0.0',        '<2.0.0' ],
        [ '<\t2.0.0',          '<2.0.0' ],
        [ '>=0.1.97',          '>=0.1.97' ],
        [ '>=0.1.97',          '>=0.1.97' ],
        [ '0.1.20 || 1.2.4',   '0.1.20||1.2.4' ],
        [ '>=0.2.3 || <0.0.1', '>=0.2.3||<0.0.1' ],
        [ '>=0.2.3 || <0.0.1', '>=0.2.3||<0.0.1' ],
        [ '>=0.2.3 || <0.0.1', '>=0.2.3||<0.0.1' ],
        [ '||',                '||' ],
        [ '2.x.x',             '>=2.0.0 <3.0.0' ],
        [ '1.2.x',             '>=1.2.0 <1.3.0' ],
        [ '1.2.x || 2.x',      '>=1.2.0 <1.3.0||>=2.0.0 <3.0.0' ],
        [ '1.2.x || 2.x',      '>=1.2.0 <1.3.0||>=2.0.0 <3.0.0' ],
        [ 'x',                 '*' ],
        [ '2.*.*',             '>=2.0.0 <3.0.0' ],
        [ '1.2.*',             '>=1.2.0 <1.3.0' ],
        [ '1.2.* || 2.*',      '>=1.2.0 <1.3.0||>=2.0.0 <3.0.0' ],
        [ '*',                 '*' ],
        [ '2',                 '>=2.0.0 <3.0.0' ],
        [ '2.3',               '>=2.3.0 <2.4.0' ],
        [ '~2.4',              '>=2.4.0 <2.5.0' ],
        [ '~2.4',              '>=2.4.0 <2.5.0' ],
        [ '~>3.2.1',           '>=3.2.1 <3.3.0' ],
        [ '~1',                '>=1.0.0 <2.0.0' ],
        [ '~>1',               '>=1.0.0 <2.0.0' ],
        [ '~> 1',              '>=1.0.0 <2.0.0' ],
        [ '~1.0',              '>=1.0.0 <1.1.0' ],
        [ '~ 1.0',             '>=1.0.0 <1.1.0' ],
        [ '^0',                '>=0.0.0 <1.0.0' ],
        [ '^ 1',               '>=1.0.0 <2.0.0' ],
        [ '^0.1',              '>=0.1.0 <0.2.0' ],
        [ '^1.0',              '>=1.0.0 <2.0.0' ],
        [ '^1.2',              '>=1.2.0 <2.0.0' ],
        [ '^0.0.1',            '>=0.0.1 <0.0.2' ],
        [ '^0.0.1-beta',       '>=0.0.1-beta <0.0.2' ],
        [ '^0.1.2',            '>=0.1.2 <0.2.0' ],
        [ '^1.2.3',            '>=1.2.3 <2.0.0' ],
        [ '^1.2.3-beta.4',     '>=1.2.3-beta.4 <2.0.0' ],
        [ '<1',                '<1.0.0' ],
        [ '< 1',               '<1.0.0' ],
        [ '>=1',               '>=1.0.0' ],
        [ '>= 1',              '>=1.0.0' ],
        [ '<1.2',              '<1.2.0' ],
        [ '< 1.2',             '<1.2.0' ],
        [ '1',                 '>=1.0.0 <2.0.0' ],
        [ '>01.02.03',  '>1.2.3',              true ],
        [ '>01.02.03',  null ],
        [ '~1.2.3beta', '>=1.2.3-beta <1.3.0', true ],
        [ '~1.2.3beta', null ],
        [ '^ 1.2 ^ 1',  '>=1.2.0 <2.0.0 >=1.0.0 <2.0.0' ]
    );

    for my $tuple (@versions) {
        my ( $pre, $wanted ) = @$tuple;
        is validRange($pre), $wanted;
    }
}

{
    # diff versions test
	# [version1, version2, result]
	# diff(version1, version2) -> result
    my @versions = (
        [ '1.0.0 - 2.0.0', [ [ '>=1.0.0', '<=2.0.0' ] ] ],
        [ '1.0.0',         [ ['1.0.0'] ] ],
        [ '>=*',           [ [''] ] ],
        [ '',              [ [''] ] ],
        [ '*',             [ [''] ] ],
        [ '*',             [ [''] ] ],
        [ '>=1.0.0',       [ ['>=1.0.0'] ] ],
        [ '>=1.0.0',       [ ['>=1.0.0'] ] ],
        [ '>=1.0.0',       [ ['>=1.0.0'] ] ],
        [ '>1.0.0',        [ ['>1.0.0'] ] ],
        [ '>1.0.0',        [ ['>1.0.0'] ] ],
        [ '<=2.0.0',       [ ['<=2.0.0'] ] ],
        [ '1',             [ [ '>=1.0.0', '<2.0.0' ] ] ],
        [ '<=2.0.0',       [ ['<=2.0.0'] ] ],
        [ '<=2.0.0',       [ ['<=2.0.0'] ] ],
        [ '<2.0.0',        [ ['<2.0.0'] ] ],
        [ '<2.0.0',        [ ['<2.0.0'] ] ],
        [ '>= 1.0.0',      [ ['>=1.0.0'] ] ],
        [ '>=  1.0.0',     [ ['>=1.0.0'] ] ],
        [ '>=   1.0.0',    [ ['>=1.0.0'] ] ],
        [ '> 1.0.0',       [ ['>1.0.0'] ] ],
        [ '>  1.0.0',      [ ['>1.0.0'] ] ],
        [ '<=   2.0.0',    [ ['<=2.0.0'] ] ],
        [ '<= 2.0.0',      [ ['<=2.0.0'] ] ],
        [ '<=  2.0.0',     [ ['<=2.0.0'] ] ],
        [ '<    2.0.0',    [ ['<2.0.0'] ] ],
        [ '<\t2.0.0',      [ ['<2.0.0'] ] ],
        [ '>=0.1.97',      [ ['>=0.1.97'] ] ],
        [ '>=0.1.97',      [ ['>=0.1.97'] ] ],
        [ '0.1.20 || 1.2.4',   [ ['0.1.20'],  ['1.2.4'] ] ],
        [ '>=0.2.3 || <0.0.1', [ ['>=0.2.3'], ['<0.0.1'] ] ],
        [ '>=0.2.3 || <0.0.1', [ ['>=0.2.3'], ['<0.0.1'] ] ],
        [ '>=0.2.3 || <0.0.1', [ ['>=0.2.3'], ['<0.0.1'] ] ],
        [ '||',                [ [''],        [''] ] ],
        [ '2.x.x', [ [ '>=2.0.0', '<3.0.0' ] ] ],
        [ '1.2.x', [ [ '>=1.2.0', '<1.3.0' ] ] ],
        [
            '1.2.x || 2.x', [ [ '>=1.2.0', '<1.3.0' ], [ '>=2.0.0', '<3.0.0' ] ]
        ],
        [
            '1.2.x || 2.x', [ [ '>=1.2.0', '<1.3.0' ], [ '>=2.0.0', '<3.0.0' ] ]
        ],
        [ 'x',     [ [''] ] ],
        [ '2.*.*', [ [ '>=2.0.0', '<3.0.0' ] ] ],
        [ '1.2.*', [ [ '>=1.2.0', '<1.3.0' ] ] ],
        [
            '1.2.* || 2.*', [ [ '>=1.2.0', '<1.3.0' ], [ '>=2.0.0', '<3.0.0' ] ]
        ],
        [
            '1.2.* || 2.*', [ [ '>=1.2.0', '<1.3.0' ], [ '>=2.0.0', '<3.0.0' ] ]
        ],
        [ '*',        [ [''] ] ],
        [ '2',        [ [ '>=2.0.0', '<3.0.0' ] ] ],
        [ '2.3',      [ [ '>=2.3.0', '<2.4.0' ] ] ],
        [ '~2.4',     [ [ '>=2.4.0', '<2.5.0' ] ] ],
        [ '~2.4',     [ [ '>=2.4.0', '<2.5.0' ] ] ],
        [ '~>3.2.1',  [ [ '>=3.2.1', '<3.3.0' ] ] ],
        [ '~1',       [ [ '>=1.0.0', '<2.0.0' ] ] ],
        [ '~>1',      [ [ '>=1.0.0', '<2.0.0' ] ] ],
        [ '~> 1',     [ [ '>=1.0.0', '<2.0.0' ] ] ],
        [ '~1.0',     [ [ '>=1.0.0', '<1.1.0' ] ] ],
        [ '~ 1.0',    [ [ '>=1.0.0', '<1.1.0' ] ] ],
        [ '~ 1.0.3',  [ [ '>=1.0.3', '<1.1.0' ] ] ],
        [ '~> 1.0.3', [ [ '>=1.0.3', '<1.1.0' ] ] ],
        [ '<1',       [ ['<1.0.0'] ] ],
        [ '< 1',      [ ['<1.0.0'] ] ],
        [ '>=1',      [ ['>=1.0.0'] ] ],
        [ '>= 1',     [ ['>=1.0.0'] ] ],
        [ '<1.2',     [ ['<1.2.0'] ] ],
        [ '< 1.2',    [ ['<1.2.0'] ] ],
        [ '1',        [ [ '>=1.0.0', '<2.0.0' ] ] ],
        [ '1 2',      [ [ '>=1.0.0', '<2.0.0', '>=2.0.0', '<3.0.0' ] ] ],
        [ '1.2 - 3.4.5', [ [ '>=1.2.0', '<=3.4.5' ] ] ],
        [ '1.2.3 - 3.4', [ [ '>=1.2.3', '<3.5.0' ] ] ],
        [ '1.2.3 - 3',   [ [ '>=1.2.3', '<4.0.0' ] ] ],
        [ '>*',          [ ['<0.0.0'] ] ],
        [ '<*',          [ ['<0.0.0'] ] ]
    );

    for my $tuple (@versions) {
		my ($r, $wanted) = @$tuple;
		is toComparators($r), $wanted;
    }
}

# TODO These probably should be implemented too
	t('\nmax satisfying', function (t) {
		[[['1.2.3', '1.2.4'], '1.2', '1.2.4'],
			[['1.2.4', '1.2.3'], '1.2', '1.2.4'],
			[['1.2.3', '1.2.4', '1.2.5', '1.2.6'], '~1.2.3', '1.2.6'],
			[['1.1.0', '1.2.0', '1.2.1', '1.3.0', '2.0.0b1', '2.0.0b2', '2.0.0b3', '2.0.0', '2.1.0'], '~2.0.0', '2.0.0', true]
		].forEach(function (v) {
			var versions = v[0]
			var range = v[1]
			var expect = v[2]
			var loose = v[3]
			var actual = semver.maxSatisfying(versions, range, loose)
			t.equal(actual, expect)
		})
		t.end()
	})

	test('\nmin satisfying', function (t) {
		[[['1.2.3', '1.2.4'], '1.2', '1.2.3'],
			[['1.2.4', '1.2.3'], '1.2', '1.2.3'],
			[['1.2.3', '1.2.4', '1.2.5', '1.2.6'], '~1.2.3', '1.2.3'],
			[['1.1.0', '1.2.0', '1.2.1', '1.3.0', '2.0.0b1', '2.0.0b2', '2.0.0b3', '2.0.0', '2.1.0'], '~2.0.0', '2.0.0', true]
		].forEach(function (v) {
			var versions = v[0]
			var range = v[1]
			var expect = v[2]
			var loose = v[3]
			var actual = semver.minSatisfying(versions, range, loose)
			t.equal(actual, expect)
		})
		t.end()
	})


